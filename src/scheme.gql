# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type companies {
  id: String!
  name: String!
  companyLead: String!
  active: Boolean!
  address: String!
  phone: String!
  nit: String!
  email: String!
  logo: String!
}

type roles {
  id: String
  active: Boolean!
  name: String!
}

type Users {
  id: String!
  username: String!
  document: String!
  gender: String!
  email: String!
  phone: String!
  age: Float!
  role: roles!
  company: companies!
}

type exercises {
  id: ID!
  name: String!
  imgGood: String!
  imgBad: String!
  active: Boolean!
  movie: String!
  movie2: String!
  activeByCompany: Boolean!
  userCreator: Users!
}

type rutines {
  id: String
  name: String
  dateIni: DateTime!
  dateEnd: DateTime!
  days: Float!
  obs: String!
  active: Boolean!
  user: Users!
  role1: roles!
  role2: roles!
  role3: roles!
  company: companies!
  exercisesByRutine: exerciseByRutine!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type rutinesType {
  id: String!
  active: Boolean!
  name: String!
}

type exerciseByRutine {
  id: String
  days: Float!
  series: Float!
  amountRepeat: [Int!]!
  weightByKilos: Float!
  break: String!
  amountRepeatMax: [Int!]!
  weightByKilosMax: Float!
  obs: String!
  rutine: rutines!
  exercise: exercises!
  user: Users!
  rutineType: rutinesType!
}

type rutineOrderRutineType {
  rutineTypeName: String!
  exercises: [exerciseByRutine!]!
  days: [Float!]!
  name: String
  dateIni: DateTime!
  dateEnd: DateTime!
}

type UsersRutines {
  id: String!
  username: String!
  document: String!
  gender: String!
  email: String!
  phone: String!
  age: Float!
  role: roles!
  company: companies!
  userId: String!
  rutines: [rutineOrderRutineType!]!
}

type auth {
  token: String!
  id: String!
}

type exercisesByRutineTypeType {
  rutineTypeName: String!
  exercises: [exerciseByRutine!]!
}

type rutineOrderDaysType {
  day: Float!
  rutineType: [exercisesByRutineTypeType!]!
}

type progress {
  id: String
  measurement: String!
  bodyIndex: String!
  weightByKilos: Float!
  dateCreated: DateTime!
  obs: String!
  user: Users!
}

type Seed {
  """Example field (placeholder)"""
  seed: String!
}

type Query {
  user_findAll: [Users!]!
  user_findAllByRoleClient: [UsersRutines!]!
  auth_signOut(userId: String!): auth!
  rutine_findAll: [rutines!]!
  rutine_findById(rutineId: String!): rutines!
  rutine_getActualRutineOrderRutineType: [rutineOrderRutineType!]!
  rutine_getActualRutineOrderDays: [rutineOrderDaysType!]!
  company_findAll: [companies!]!
  company_findById(companyId: String!): companies!
  role_findAll: [roles!]!
  role_findById(roleId: String!): roles!
  rutineType_findAll: [rutinesType!]!
  rutineType_findById(id: String!): rutinesType!
  exercise_findAll: [exercises!]!
  exercise_findById(exerciseId: String!): exercises!
  exercise_findByRutineTypeId(rutineTypeId: String!): [exercises!]!
  progress_findAll: [progress!]!
  progress_findById(progressId: String!): progress!
  exercisesByRutineType_findAll: [exerciseByRutine!]!
  _runSeed: [Seed!]!
}

type Mutation {
  user_create(createUserInput: CreateUserInput!): Users!
  user_update(userId: String!, updateUserInput: UpdateUserInput!): Users!
  remove(userId: String!): Users!
  auth_signIn(signInAuthInput: CreateAuthInput!): auth!
  auth_signInForanyToken(signInAuthInput: AuthForanyToken!): auth!
  auth_signUp(createUserInput: CreateUserInput!): auth!
  rutine_create(createRutineInput: CreateRutineInput!): rutines!
  rutine_create_with_exercises(createRutineWithExercisesInput: CreateRutineWithExercisesInput!): rutines!
  rutine_update(rutineId: String!, updateRutineInput: UpdateRutineInput!): rutines!
  rutine_delete(rutineId: String!): rutines!
  company_create(createCompanyInput: CreateCompanyInput!): companies!
  company_update(companyId: String!, updateCompanyInput: UpdateCompanyInput!): companies!
  company_delete(companyId: String!): companies!
  role_create(createRoleInput: CreateRoleInput!): roles!
  role_update(roleId: String!, updateRoleInput: UpdateRoleInput!): roles!
  role_delete(roleId: String!): roles!
  rutineType_create(createRutineTypeInput: CreateRutinesTypeInput!): rutinesType!
  rutineType_update(rutinesTypeId: String!, updateRutinesTypeInput: UpdateRutinesTypeInput!): rutinesType!
  exercise_delete(exerciseId: String!): exercises!
  exercise_create(createExerciseInput: CreateExerciseInput!): exercises!
  exercise_update(exerciseId: String!, updateExerciseInput: UpdateExerciseInput!): exercises!
  exercisesByRutineType_create(createExercisesByRutineInput: CreateExercisesByRutineInput!): exerciseByRutine!
}

input CreateUserInput {
  age: Float = 0
  companyId: String = "0001COF"
  document: String = ""
  email: String!
  gender: String = "MEN"
  phone: String = ""
  roleId: String = "CLIENT"
  password: String = ""
  username: String = ""
}

input UpdateUserInput {
  username: String!
  document: String!
  gender: String
  email: String
  phone: String
  age: Float
  roleId: String
  active: Boolean
  companyId: String
}

input CreateAuthInput {
  email: String!
  foranyToken: String!
}

input AuthForanyToken {
  email: String!
  foranyToken: String!
  username: String = ""
}

input CreateRutineInput {
  amountRepeat: Float!
  companyId: String!
  dateIni: DateTime!
  dateEnd: DateTime!
  days: Float!
  obs: String!
  roleId1: String!
  roleId2: String!
  roleId3: String!
  name: String!
  series: Float!
  userId: String!
}

input CreateRutineWithExercisesInput {
  dateIni: DateTime!
  dateEnd: DateTime!
  days: Float!
  obs: String!
  roleId1: String!
  roleId2: String
  roleId3: String
  name: String!
  exercises: [ExerciseInput!]!
  companyId: String
  userId: String!
}

input ExerciseInput {
  amountRepeat: [Int!]!
  series: Float!
  break: String!
  weightByKilos: Float!
  amountRepeatMax: [Int!]!
  weightByKilosMax: Float!
  exerciseId: String!
  rutineTypeId: String!
  days: Float!
}

input UpdateRutineInput {
  amountRepeat: Float
  companyId: String
  dateIni: DateTime
  dateEnd: DateTime
  days: Float
  exerciseId: String
  imgGood: String
  imgBad: String
  obs: String
  roleId1: String
  roleId2: String
  roleId3: String
  rutineTypeId: String
  names: String
  series: Float
  userId: String
}

input CreateCompanyInput {
  active: Boolean = true
  address: String!
  companyLead: String = ""
  email: String!
  logo: String!
  name: String!
  nameId: String!
  nit: String!
  phone: String!
}

input UpdateCompanyInput {
  active: Boolean
  address: String
  companyLead: String
  email: String
  logo: String
  name: String
  nit: String
  phone: String
}

input CreateRoleInput {
  name: String!
}

input UpdateRoleInput {
  active: Boolean
  name: String
}

input CreateRutinesTypeInput {
  active: Boolean!
  name: String!
}

input UpdateRutinesTypeInput {
  active: Boolean
  name: String
}

input CreateExerciseInput {
  name: String!
  imgGood: String!
  imgBad: String!
  movie: String!
  userCreatorId: String!
  active: Boolean
  activeByCompany: Boolean
}

input UpdateExerciseInput {
  name: String
  imgGood: String
  imgBad: String
  movie: String
  userCreatorId: String
  active: Boolean
  activeByCompany: Boolean
}

input CreateExercisesByRutineInput {
  days: Float!
  amountRepeat: [Int!]!
  obs: String!
  break: String!
  series: Float!
  exerciseId: String!
  rutineTypeId: String!
  userId: String!
  rutineId: String!
  weightByKilos: Float
}